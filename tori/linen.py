#!/usr/bin/env python3

'''
POV Primitive Mosaic, Linen Print
Program for conversion of image into a set of shapes, simulating fabric,
colored according to source image pixels, a-la textile printing

Created by: Ilya Razmanov (mailto:ilyarazmanov@gmail.com)
            aka Ilyich the Toad (mailto:amphisoft@gmail.com)

Input: PNG
Output: POVRay

History:
2007    General idea for Kris Zaklika.
2024    Complete internal rewriting for POVray. Versions from now on:

01.000  linen.py Initial release
01.001  Per knit normal added
01.002  Normal randomization
01.003  Node thickness randomisation to break monotonous shading pattern
01.004  GUI improved.

    Project mirrors:
        https://github.com/Dnyarri/POVmosaic
        https://gitflic.ru/project/dnyarri/povmosaic

'''

__author__ = "Ilya Razmanov"
__copyright__ = "(c) 2007-2024 Ilya Razmanov"
__credits__ = "Ilya Razmanov"
__license__ = "unlicense"
__version__ = "2024.04.04"

__maintainer__ = "Ilya Razmanov"
__email__ = "ilyarazmanov@gmail.com"
__status__ = "Production"

from tkinter import Tk, Label, filedialog
from time import time, ctime
from random import random

import png                      # PNG reading: PyPNG from: https://gitlab.com/drj11/pypng

# --------------------------------------------------------------
# Creating dialog

sortir = Tk()
sortir.title('PNG to POV conversion')
sortir.geometry('+100+100')
zanyato = Label(sortir, text='Starting...', font=(
    "arial", 14), padx=16, pady=10, justify='center')
zanyato.pack()
sortir.withdraw()

# Main dialog created and hidden
# --------------------------------------------------------------

# Open source image
sourcefilename = filedialog.askopenfilename(title='Open source PNG file', filetypes=[
                                            ('PNG', '.png')], defaultextension=('PNG', '.png'))
if (sourcefilename == ''):
    quit()

source = png.Reader(filename=sourcefilename)  # starting PyPNG

# Opening image, iDAT comes to "pixels" as bytearray, to be tuple'd later
X, Y, pixels, info = source.asRGBA()

Z = (info['planes'])            # Maximum CHANNEL NUMBER
imagedata = tuple((pixels))     # Attempt to fix all bytearrays as tuple

if (info['bitdepth'] == 8):
    maxcolors = 255             # Maximal value for 8-bit channel
if (info['bitdepth'] == 16):
    maxcolors = 65535           # Maximal value for 16-bit channel

# Open export file
resultfile = filedialog.asksaveasfile(mode='w', title='Save resulting POV file', filetypes=[
    ('POV-Ray scene file', '*.pov'),
    ('All Files', '*.*'),],
    defaultextension=('POV-Ray scene file', '.pov'))
if (resultfile == ''):
    quit()
# Both files opened

# src a-la FM style src(x,y,z)
# Image should be opened as "imagedata" by main program before
# Note that X, Y, Z are not determined in function, you have to determine it in main program


def src(x, y, z):  # Analog src from FM, force repeate edge instead of out of range

    cx = x
    cy = y
    cx = max(0, cx)
    cx = min((X-1), cx)
    cy = max(0, cy)
    cy = min((Y-1), cy)

    # Here is the main magic of turning two x, z into one array position
    position = (cx*Z) + z
    channelvalue = int(((imagedata[cy])[position]))

    return channelvalue
# end of src function


def srcY(x, y):  # Converting to greyscale, returns Y, force repeate edge instead of out of range

    cx = x
    cy = y
    cx = max(0, cx)
    cx = min((X-1), cx)
    cy = max(0, cy)
    cy = min((Y-1), cy)

    if (info['planes'] < 3):    # supposedly L and LA
        Yntensity = src(x, y, 0)
    else:                       # supposedly RGB and RGBA
        Yntensity = int(0.2989*src(x, y, 0) + 0.587 *
                        src(x, y, 1) + 0.114*src(x, y, 2))

    return Yntensity
# end of srcY function

# WRITING POV FILE

# --------------------------------
#   POV header start
#


resultfile.writelines(['/*\n',
                       'Persistence of Vision Ray Tracer Scene Description File\n',
                       'Version: 3.7\n',
                       'Description: Mosaic picture simulating woven fabric mesh (linen) with textile printing\n',
                       'Author: Automatically generated by linen.py program, see POVRay Mosaic project at\n',
                       'https://github.com/Dnyarri/POVmosaic\n',
                       'https://gitflic.ru/project/dnyarri/povmosaic\n',
                       'developed by Ilya Razmanov aka Ilyich the Toad\n',
                       'https://dnyarri.github.io\n',
                       'mailto:ilyarazmanov@gmail.com\n',
                       '*/\n\n'
                       ])

resultfile.write(f'// Converted from: {sourcefilename} ')
seconds = time()
localtime = ctime(seconds)
resultfile.write(f'at: {localtime}\n')
resultfile.write(f'// Source info: {info}\n\n')

#   Globals

resultfile.writelines(['\n',
                       '#version 3.7;\n\n',
                       'global_settings{\n',
                       '    max_trace_level 3   // Small to speed up preview. May need to be increased for metals\n',
                       '    adc_bailout 0.01    // High to speed up preview. May need to be decreased to 1/256\n',
                       '    ambient_light <0.5,0.5,0.5>\n',
                       '    assumed_gamma 1.0\n}\n\n',
                       '#include "colors.inc"\n',
                       '#include "finish.inc"\n',
                       '#include "metals.inc"\n',
                       '#include "golds.inc"\n',
                       '\n\n'
                       ])
#
#   POV header end
# --------------------------------

# Main element
resultfile.writelines(['\n// Main torse, as you were, torus, to be edited\n\n',
                       '#declare bublik = torus {0.5, 0.321 scale <1.0, 1.0, 1.0>}  // Default round thread\n',
                       '// #declare bublik = torus {0.5, 0.1 scale <1.0, 4.0, 1.0>}   // Makes flat ribbon weaving\n',
                       '// #declare bublik = torus {0.5, 0.4 scale <1.0, 0.2, 1.0>}   // Makes threads unrealistic yet funny\n',
                       '#declare thickscale = 0.5;      // Random thikness variation, 0.0 gives regular structure, > 2.0 not recommended\n',
                       '#declare thingie_finish = finish{ambient 0.1 diffuse 0.7 specular 0.8 roughness 0.001}\n',
                       '#declare color_factor = 1.0;    // Color multiplier for all channels\n\n',
                       '\n// Node properties - normal\n',
                       '#declare normalheight = 0.5;    // Normal intensity. Default 0.5\n',
                       '#declare normalangle = 15;      // Normal is rotated at this angle around z, degrees\n',
                       '#declare normalanglerange = 15; // Normal rotation angle randomly varies within this range, degrees\n\n'
                       ])

resultfile.write(f'#declare normalrand = seed({
                 int(seconds*10000000)});   // Seeding random\n')

# string for random scale
scalestring = (' scale <1.0+thickscale*(rand(normalrand)-0.5), 1.0, 1.0>')
# string containing all normal text
normalstring = (
    ' normal {spiral1 5, normalheight scallop_wave scale <0.1, 0.1, 1.0> rotate x*90 rotate z*(normalangle+normalanglerange*(rand(normalrand)-0.5))}    // Normal for each fibre\n')

# Object "thething" made of thingies

resultfile.write('\n// Object thething made out of thingies (nodes)\n')
resultfile.write('#declare thething = union {\n')  # Opening object "thething"

# Now going to cycle through image and build object

for y in range(0, Y, 1):

    message = ('Processing row ' + str(y) + ' of ' + str(Y) + '...')
    sortir.deiconify()
    zanyato.config(text=message)
    sortir.update()
    sortir.update_idletasks()

    resultfile.write(f'\n\n // Row {y}\n')

    for x in range(0, X, 1):

        r = float(src(x, y, 0))/maxcolors
        g = float(src(x, y, 1))/maxcolors
        b = float(src(x, y, 2))/maxcolors    # Normalize colors to 0..1.0
        # a = 0 - transparent, a = 1.0 - opaque
        a = float(src(x, y, 3))/maxcolors
        tobeornottobe = random()     # to be used for alpha dithering
        # brightness, not used by default
        yarkost = float(0.2989*r)+float(0.587*g)+float(0.114*b)

        # whether to draw thingie in place of partially transparent pixel or not
        if (a > tobeornottobe):

            if ((y+1) % 2) == ((x+1) % 2):           # chessboard pattern

                # krasnij
                resultfile.write('    object {bublik clipped_by{plane{x,0}}')
                resultfile.write(normalstring)
                resultfile.write(scalestring)
                resultfile.write(' pigment {')                  # open pigment
                resultfile.write(
                    f'rgb <color_factor*{r}, color_factor*{g}, color_factor*{b}>')
                resultfile.write('} finish {thingie_finish} ')  # close pigment
                # placing half node
                resultfile.write(f'translate <0, {y}, {x}>')
                resultfile.write('}\n')         # Closing half node

                # sinij
                resultfile.write('    object {bublik clipped_by{plane{-x,0}}')
                resultfile.write(normalstring)
                resultfile.write(scalestring)
                resultfile.write(' rotate x*90 pigment {')      # open pigment
                resultfile.write(
                    f'rgb <color_factor*{r}, color_factor*{g}, color_factor*{b}>')
                resultfile.write('} finish {thingie_finish} ')  # close pigment
                # placing half node
                resultfile.write(f'translate <0, {y}, {x}>')
                resultfile.write('}\n')         # Closing half node

            else:                                           # chessboard pattern

                # sinij
                resultfile.write('    object {bublik clipped_by{plane{-x,0}}')
                resultfile.write(normalstring)
                resultfile.write(scalestring)
                resultfile.write(' pigment {')                   # open pigment
                resultfile.write(
                    f'rgb <color_factor*{r}, color_factor*{g}, color_factor*{b}>')
                # close pigment
                resultfile.write('} finish {thingie_finish} ')
                resultfile.write(f' translate <0, {y}, {
                                 x}>')    # placing half node
                resultfile.write('}\n')         # Closing half node

                # krasnij
                resultfile.write('    object {bublik clipped_by{plane{x,0}}')
                resultfile.write(normalstring)
                resultfile.write(scalestring)
                resultfile.write(' rotate x*90 pigment {')      # open pigment
                resultfile.write(
                    f'rgb <color_factor*{r}, color_factor*{g}, color_factor*{b}>')
                resultfile.write('} finish {thingie_finish} ')  # close pigment
                resultfile.write(f' translate <0, {y}, {
                                 x}>')   # placing half node
                resultfile.write('}\n')         # Closing half node


# Transform object to fit 1, 1, 1 cube at 0, 0, 0 coordinates
resultfile.write(
    '\n// Object transforms to fit 1, 1, 1 cube at 0, 0, 0 coordinates\n')
resultfile.write('translate <0.0, 0.5, 0.5>\n')   # compensate for -0.5 extra
# translate to center object center at 0, 0, 0
resultfile.write(f'translate <0.0, -0.5*{Y}, -0.5*{X}>\n')
# rescale, mirroring POV coordinates
resultfile.write(
    f'scale <-1.0/{max(X, Y)}, -1.0/{max(X, Y)}, 1.0/{max(X, Y)}>\n')

resultfile.write('} // thething closed\n')   # Closing object "thething"

# Insert object into scene
resultfile.write('object {thething}\n')

# Camera
proportions = max(X, Y)/X
resultfile.write('#declare camera_height = 2.0;\n\n')
resultfile.write(
    'camera {\n   // orthographic\n    location <camera_height, 0.0, 0.0>\n    right x*image_width/image_height\n    up y\n    direction <0,0,1>\n    angle 2.0*(degrees(atan2(')
resultfile.write(f'{0.5 * proportions}')
resultfile.write(
    f', camera_height-(1.0/{max(X, Y)})))) // Supposed to fit object \n    look_at <0.0, 0.0, 0.0>')
resultfile.write('\n}\n\n')

# Light 1
resultfile.write(
    'light_source {0*x\n   color rgb <1.1,1,1>\n   translate <4, 2, 3>\n}\n\n')
# Light 2
resultfile.write(
    'light_source {0*x\n   color rgb <0.9,1,1>\n   translate <-2, 6, 7>\n}\n\n')
resultfile.write(
    '\n/*\n\nhappy rendering\n\n  0~0\n (---)\n(.>|<.)\n-------\n\n*/')
# Close output
resultfile.close()

# --------------------------------------------------------------
# Destroying dialog

sortir.destroy()
sortir.mainloop()

# Dialog destroyed and closed
# --------------------------------------------------------------
